// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: post_category.sql

package db

import (
	"context"
	"database/sql"
)

const createPostCategory = `-- name: CreatePostCategory :execresult
INSERT INTO post_categories
(post_id,category_id)
VALUES (?,?)
`

type CreatePostCategoryParams struct {
	PostID     int32 `json:"post_id"`
	CategoryID int32 `json:"category_id"`
}

func (q *Queries) CreatePostCategory(ctx context.Context, arg CreatePostCategoryParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPostCategory, arg.PostID, arg.CategoryID)
}

const getPostCategory = `-- name: GetPostCategory :one
SELECT post_id, category_id FROM post_categories 
WHERE post_id =?
`

func (q *Queries) GetPostCategory(ctx context.Context, postID int32) (PostCategory, error) {
	row := q.db.QueryRowContext(ctx, getPostCategory, postID)
	var i PostCategory
	err := row.Scan(&i.PostID, &i.CategoryID)
	return i, err
}

const updatePostCategory = `-- name: UpdatePostCategory :exec
UPDATE post_categories
SET category_id = ?
WHERE post_id = ?
`

type UpdatePostCategoryParams struct {
	CategoryID int32 `json:"category_id"`
	PostID     int32 `json:"post_id"`
}

func (q *Queries) UpdatePostCategory(ctx context.Context, arg UpdatePostCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updatePostCategory, arg.CategoryID, arg.PostID)
	return err
}
