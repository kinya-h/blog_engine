// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: comment.sql

package db

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :execresult
INSERT INTO comments(post_id,user_id,content)
VALUES(?,?,?)
`

type CreateCommentParams struct {
	PostID  int32  `json:"post_id"`
	UserID  int32  `json:"user_id"`
	Content string `json:"content"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createComment, arg.PostID, arg.UserID, arg.Content)
}

const getComment = `-- name: GetComment :one
SELECT p.title,c.content,u.username,u.email
FROM comments c
JOIN users u 
ON u.user_id = c.user_id
JOIN posts p
ON c.post_id = c.post_id
WHERE c.comment_id = ?
`

type GetCommentRow struct {
	Title    string `json:"title"`
	Content  string `json:"content"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) GetComment(ctx context.Context, commentID int32) (GetCommentRow, error) {
	row := q.db.QueryRowContext(ctx, getComment, commentID)
	var i GetCommentRow
	err := row.Scan(
		&i.Title,
		&i.Content,
		&i.Username,
		&i.Email,
	)
	return i, err
}

const getComments = `-- name: GetComments :one
SELECT p.title,c.content,u.username,u.email
FROM comments c
JOIN users u 
ON u.user_id = c.user_id
JOIN posts p
ON c.post_id = c.post_id
`

type GetCommentsRow struct {
	Title    string `json:"title"`
	Content  string `json:"content"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) GetComments(ctx context.Context) (GetCommentsRow, error) {
	row := q.db.QueryRowContext(ctx, getComments)
	var i GetCommentsRow
	err := row.Scan(
		&i.Title,
		&i.Content,
		&i.Username,
		&i.Email,
	)
	return i, err
}
