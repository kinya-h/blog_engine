// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const fetchUsers = `-- name: FetchUsers :many
SELECT username, email,
       last_login,created_at, updated_at
       FROM users
`

type FetchUsersRow struct {
	Username  string       `json:"username"`
	Email     string       `json:"email"`
	LastLogin sql.NullTime `json:"last_login"`
	CreatedAt sql.NullTime `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) FetchUsers(ctx context.Context) ([]FetchUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, fetchUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FetchUsersRow{}
	for rows.Next() {
		var i FetchUsersRow
		if err := rows.Scan(
			&i.Username,
			&i.Email,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
