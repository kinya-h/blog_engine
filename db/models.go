// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UsersRole string

const (
	UsersRoleAdmin   UsersRole = "admin"
	UsersRoleAuthor  UsersRole = "author"
	UsersRoleVisitor UsersRole = "visitor"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole `json:"users_role"`
	Valid     bool      `json:"valid"` // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

type Category struct {
	CategoryID  int32  `json:"category_id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

type Comment struct {
	CommentID int32     `json:"comment_id"`
	PostID    int32     `json:"post_id"`
	UserID    int32     `json:"user_id"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
}

type Customer struct {
	CustomerID int32          `json:"customer_id"`
	Name       sql.NullString `json:"name"`
	Phone      string         `json:"phone"`
	Email      sql.NullString `json:"email"`
}

type Post struct {
	PostID    int32     `json:"post_id"`
	UserID    int32     `json:"user_id"`
	Title     string    `json:"title"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type PostCategory struct {
	PostID     int32 `json:"post_id"`
	CategoryID int32 `json:"category_id"`
}

type PostTag struct {
	PostID int32 `json:"post_id"`
	TagID  int32 `json:"tag_id"`
}

type Session struct {
	ID           uuid.UUID `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
	CreatedAt    time.Time `json:"created_at"`
}

type Tag struct {
	TagID int32  `json:"tag_id"`
	Name  string `json:"name"`
}

type User struct {
	UserID       int32        `json:"user_id"`
	Username     string       `json:"username"`
	Email        string       `json:"email"`
	PasswordHash string       `json:"password_hash"`
	Role         UsersRole    `json:"role"`
	LastLogin    sql.NullTime `json:"last_login"`
	CreatedAt    time.Time    `json:"created_at"`
	UpdatedAt    time.Time    `json:"updated_at"`
}
